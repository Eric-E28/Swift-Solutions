// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PopNGo_BDD_Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Distance Calculations to Events")]
    [NUnit.Framework.CategoryAttribute("Tristan")]
    public partial class DistanceCalculationsToEventsFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "Tristan"};
        
#line 1 "PG-200.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Distance Calculations to Events", @"To enhance the user's ability to pick and choose events, they need to be able to see how close an event is to their location. This will allow for better planning on the user's part and overall be more informative and user-friendly for the site's experience.", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Seeing the Distance display on Event Cards")]
        public async System.Threading.Tasks.Task SeeingTheDistanceDisplayOnEventCards()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Seeing the Distance display on Event Cards", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await testRunner.GivenAsync("I am a user with first name \'Tristan\'", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
await testRunner.AndAsync("I login", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
await testRunner.AndAsync("I\'m located in Monmouth, Oregon, United States", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
await testRunner.WhenAsync("I am on the \"Explore\" page", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
await testRunner.AndAsync("the events have loaded", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
await testRunner.ThenAsync("I should see section on the event cards with the id \'distance-display\'", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adjust distance method in Explore page")]
        public async System.Threading.Tasks.Task AdjustDistanceMethodInExplorePage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Adjust distance method in Explore page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
await testRunner.GivenAsync("I am a user with first name \'Tristan\'", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
await testRunner.AndAsync("I login", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
await testRunner.AndAsync("I\'m located in Monmouth, Oregon, United States", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
await testRunner.WhenAsync("I am on the \"Explore\" page", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
await testRunner.AndAsync("the events have loaded", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
await testRunner.AndAsync("I have changed the distance units to \"miles\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
await testRunner.ThenAsync("I should see \"Mi\" in the \"distance-unit\" element of the first event", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See the User Settings page")]
        public async System.Threading.Tasks.Task SeeTheUserSettingsPage()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("See the User Settings page", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
await testRunner.GivenAsync("I am a user with first name \'Tristan\'", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
await testRunner.AndAsync("I login", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
await testRunner.WhenAsync("I am on the \"Profile\" page", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
await testRunner.ThenAsync("I should be able to navigate to the \"User Settings\" page", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Seeing the Distance Unit settings")]
        public async System.Threading.Tasks.Task SeeingTheDistanceUnitSettings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Seeing the Distance Unit settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 30
await testRunner.GivenAsync("I am a user with first name \'Tristan\'", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
await testRunner.WhenAsync("I am on the \"User Settings\" page", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
await testRunner.ThenAsync("I should see a way to edit my \'Distance Units\' setting", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change the Distance Unit settings")]
        public async System.Threading.Tasks.Task ChangeTheDistanceUnitSettings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Change the Distance Unit settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
await testRunner.GivenAsync("I am a user with first name \'Tristan\'", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
await testRunner.AndAsync("I am on the \"User Settings\" page", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
await testRunner.WhenAsync("I set the \"distance-unit-input\" to \"kilometers\"", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
await testRunner.AndAsync("I submit the form with \"update-settings-button\"", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
await testRunner.ThenAsync("I should see the value \"kilometers\" in \"distance-unit-input\"", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
